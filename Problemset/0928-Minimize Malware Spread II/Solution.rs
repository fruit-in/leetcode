impl Solution {
    pub fn min_malware_spread(graph: Vec<Vec<i32>>, initial: Vec<i32>) -> i32 {
        let n = graph.len();
        let mut min_infected = n;
        let mut ret = initial[0];

        for &removed in &initial {
            let mut is_infected = vec![false; n];
            let mut stack = vec![];
            let mut count = 0;

            for &i in &initial {
                if i != removed {
                    is_infected[i as usize] = true;
                    stack.push(i as usize);
                    count += 1;
                }
            }

            while let Some(i) = stack.pop() {
                for j in 0..n {
                    if graph[i][j] == 1 && !is_infected[j] && j != removed as usize {
                        is_infected[j] = true;
                        stack.push(j);
                        count += 1;
                    }

                    if count > min_infected {
                        break;
                    }
                }

                if count > min_infected {
                    break;
                }
            }

            if count < min_infected || (count == min_infected && removed < ret) {
                min_infected = count;
                ret = removed;
            }
        }

        ret
    }
}
